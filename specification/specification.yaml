openapi: 3.0.0
info:
  title: ToDoList API
  description: API documentation for ToDoList application
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /login:
    post:
      summary: Login a user
      description: Login and receive an access token
      tags:
        - Authorization
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: 'test@test.com'
                password:
                  type: string
                  example: 'password'
      responses:
        200:
          description: Access token data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'

  /logout:
    post:
      summary: Logout a user
      description: Logout from the current session
      tags:
        - Authorization
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Successfully logged out.'
        401:
          $ref: '#/components/responses/UnauthenticatedErrorResponse'

  /forgot-password:
    post:
      summary: Forgot password
      description: Send password reset link to the user's email
      tags:
        - Authorization
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: 'test@test.com'
      responses:
        200:
          description: Password reset link sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                message: 'We have emailed your password reset link!'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'

  /reset-password:
    post:
      summary: Reset password
      description: Reset user password using a reset token
      tags:
        - Authorization
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: 'test@test.com'
                token:
                  type: string
                  description: Token from the reset password link
                password:
                  type: string
                  example: 'NewPassword'
                password_confirmation:
                  type: string
                  example: 'NewPassword'
      responses:
        200:
          description: Password successfully reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              example:
                message: 'Your password has been reset!'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'

  /register:
    post:
      summary: Register a new user
      description: Register a new user for the application
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'test@example.com'
                password:
                  type: string
                  example: 'password123'
                name:
                  type: string
                  example: 'John Doe'
                password_confirmation:
                  type: string
                  example: 'password123'
      responses:
        200:
          description: User successfully registered

  /tasks:
    get:
      summary: Get all tasks
      description: Retrieve a list of tasks with optional filters
      tags:
        - Task
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: status
          in: query
          description: Filter tasks by status
          required: false
          schema:
            type: string
            default: pending
        - name: priority
          in: query
          description: Filter tasks by priority
          required: false
          schema:
            type: string
            default: low
        - name: sort
          in: query
          description: Sort tasks by a field
          required: false
          schema:
            type: string
            default: due_date
        - name: direction
          in: query
          description: Sort direction (asc/desc)
          required: false
          schema:
            type: string
            default: asc
      responses:
        200:
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      summary: Create a new task
      description: Create a new task for the ToDo list
      tags:
        - Task
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        201:
          description: Task successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{taskId}:
    get:
      summary: Get task by ID
      description: Retrieve a specific task by ID
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    put:
      summary: Update task by ID
      description: Update task details by task ID
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        200:
          description: Task successfully updated

    delete:
      summary: Delete task by ID
      description: Delete a specific task by task ID
      tags:
        - Task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Task successfully deleted

components:
  schemas:
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
      example:
        access_token: 'your_access_token'

    Task:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Task name"
        description:
          type: string
          example: "Task description"
        status:
          type: string
          example: "pending"
        priority:
          type: string
          example: "low"
        due_date:
          type: string
          format: date
          example: "2024-12-31"

    TaskInput:
      type: object
      properties:
        title:
          type: string
          example: "Task name"
        description:
          type: string
          example: "Task description"
        status:
          type: string
          example: "pending"
        priority:
          type: string
          example: "low"
        due_date:
          type: string
          format: date
          example: "2024-12-31"

    Message:
      type: object
      properties:
        message:
          type: string
          example: "We have emailed your password reset link!"

  responses:
    ValidationErrorResponse:
      description: Validation error occurred
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid input"

    UnauthenticatedErrorResponse:
      description: Unauthorized request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthenticated"

    BadRequestErrorResponse:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid email format"
